(
  (file, person.u, (
    (import, (stdlib)),

    (type, Person, (struct { //TODO: struct definition
      string name
      int age
      *Person spouse = nil
      array[*Person] children = array[*Person]{}
    })),

    (tfun, Person, growUp, ((*Person, p)), (*Person), (
      (set, p.age, (+, p.age, 1)),
      (return, p)
    )),

    (tfun, Person, marry, ((*Person, p), (*Person, spouse)), (*Person), (
      (set, p.spouse, spouse),
      (set, spouse.spouse, p),
      (return, p)
    ))

    (tfun, Person, haveChild, ((*Person p), (string, name), (int, age, 0)), (*Person), (
      (if, (call, typeof(name).empty, (name)), (
        (return, nil)
      ), ()),

      (set, newPerson, &Person{name, age}), //TODO: &Person{}

      (call, typeof(p.children).append, (p.children, newPerson)),
      (if, p.spouse, (
        (call, typeof(p.spouse.children).append, (p.spouse.children, newPerson))
      ), ()),

      (return, newPerson)
    ))

  )), (file, main.u, (

    (import, (./person.u)),

    (fun, startFamily, ((*Person, A), (*Person, B)), (bool), (
      (set, C, (call, typeof(%X).haveChild, ((call, typeof(A).marry, (A, B)), "Gafia"))), //TODO: %X = (call, typeof(A).marry, (A, B))
      (set, N, (call, typeof(B).haveChild, (B, ""))),

      (call, print, ("[startFamily]", A, B, C, N, (sep, ", "))),
      (call, delete, (N)),
      (return, true)
    )),

    (fun, testFamily, ((*Person, A)), (bool), (
      (set, C, (call, array[i], (A.children, 0))),
      (set, D, (call, copy, (C))),

      (set, equivalent, (call, ==, (C, D))),
      (set, theSame, (===, C, D)),
      (call, print, ("[testFamily]", C, D, equivalent, theSame, (===, C, C), (===, D, D))),

      (call, delete, (D)),
      (return, (&&, equivalent, (!, theSame)))
    )),

    (fun, main, ((array[string], args)), (int), (
      (set, A, Person{(call, array[i], (args, 0)), 22}), //TODO Person{}
      (set, B, Person{(call, args[i], (args, 1)), 21}),

      (if, (!, (call, startFamily, (A, B))), (
        (call, print, ("[startFamily] Error")),
        (return, 1)
      ),
        (if, (!, (call, testFamily, (A)), (
          (call, print, ("[testFamily] Error")),
          (return, 1),
        ), ())
      )),

      (return, 0)
    ))
  ))
)
